import unittest

from generator.permuted_congruential_generators import PermutedCongruentialGenerator


class TestLCG(unittest.TestCase):
    SEQUENCES_PATH = "sequences/permuted_congruential_generators"

    def test_pcg_c(self):
        """Test against sequence pre-generated by the PCG C implementation"""

        generator = PermutedCongruentialGenerator(1, seed=1)
        expected_sequence = self._read_sequence(self.SEQUENCES_PATH + "/pcg-s1i1.txt")
        generated_sequence = [generator.random_number() for _ in range(len(expected_sequence))]
        self.assertEqual(generated_sequence, expected_sequence)

        generator.seed(123, seq=123)
        expected_sequence = self._read_sequence(self.SEQUENCES_PATH + "/pcg-s123i123.txt")
        generated_sequence = [generator.random_number() for _ in range(len(expected_sequence))]
        self.assertEqual(generated_sequence, expected_sequence)

        generator.seed(18446744073709551615, seq=9223372036854775807)
        expected_sequence = self._read_sequence(
            self.SEQUENCES_PATH + "/pcg-s18446744073709551615i9223372036854775807.txt")
        generated_sequence = [generator.random_number() for _ in range(len(expected_sequence))]
        self.assertEqual(generated_sequence, expected_sequence)

        generator.seed(1869455874862652155, seq=2790460240220134544)
        expected_sequence = self._read_sequence(
            self.SEQUENCES_PATH + "/pcg-s1869455874862652155i2790460240220134544.txt")
        generated_sequence = [generator.random_number() for _ in range(len(expected_sequence))]
        self.assertEqual(generated_sequence, expected_sequence)

    @staticmethod
    def _read_sequence(file):
        with open(file) as f:
            sequence = f.readlines()

        sequence = list(filter(lambda l: l[:1] != "#", sequence))
        sequence = list(map(lambda l: int(l.strip()), sequence))

        return sequence


if __name__ == '__main__':
    unittest.main()
