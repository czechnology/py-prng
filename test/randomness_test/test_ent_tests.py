import unittest
from os.path import dirname

from generator.generator import StaticSequenceGenerator, StaticFileGenerator
from randomness_test import nist_sp_800_22_tests as nist
from utils.bit_tools import split_chunks
from randomness_test import ent_tests as ent


class TestMBT(unittest.TestCase):
    SEQ_FILE_PATH = dirname(__file__) + '/sequences/ent/'
    SEQ_FILE_EXT = '.bin'
    SEQ_FILE_PATT = SEQ_FILE_PATH + '%s' + SEQ_FILE_EXT

    def test_ent_hotbits_bytes(self):
        """Test if the ent tests implementation matches the results reported on the HotBits website:
        https://www.fourmilab.ch/hotbits/statistical_testing/stattest.html
        """
        with StaticFileGenerator(file=self.SEQ_FILE_PATT % 'FourmilabHotBits') as generator:
            n_bytes = 11468800

            # byte calculations
            entropy, chi_sq, mean, monte_pi, scc = ent.run_all(generator, n_bytes, binary=False,
                                                               print_log=True)
            # print("Byte result:", entropy, chi_sq, mean, monte_pi, scc)

            # Entropy = 7.999975 bits per byte.
            self.assertAlmostEqual(entropy, 7.999975, 6)
            # Optimum compression would reduce the size of this 11468800 byte file by 0 percent.
            # Chi square distribution for 11468800 samples is 402.53, and randomly would exceed this
            # value 0.01 percent of the times.
            self.assertAlmostEqual(chi_sq, 402.53, 2)
            # Arithmetic mean value of data bytes is 127.5423 (127.5 = random).
            self.assertAlmostEqual(mean, 127.5423, 4)
            # Monte Carlo value for Pi is 3.141486168 (error 0.00 percent).
            self.assertAlmostEqual(monte_pi, 3.141486168, 9)
            # Serial correlation coefficient is -0.000053 (totally uncorrelated = 0.0).
            self.assertAlmostEqual(scc, -0.000053, 6)

    def test_ent_hotbits_binary(self):
        """Test if the ent tests implementation matches the results generated by the C version,
        when applied to the data set from HotBits website:
        https://www.fourmilab.ch/hotbits/statistical_testing/stattest.html
        """
        with StaticFileGenerator(file=self.SEQ_FILE_PATT % 'FourmilabHotBits') as generator:
            n_bits = 11468800 * 8

            # binary calculations
            entropy, chi_sq, mean, monte_pi, scc = ent.run_all(generator, n_bits, binary=True,
                                                               print_log=True)
            print("Byte result:", entropy, chi_sq, mean, monte_pi, scc)

            # Entropy = 1.000000 bits per bit.
            self.assertAlmostEqual(entropy, 1.000000, 6)
            # Optimum compression would reduce the size of this 91750400 bit file by 0 percent.
            # Chi square distribution for 91750400 samples is 0.05, and randomly would exceed this
            # value 81.93 percent of the times.
            self.assertAlmostEqual(chi_sq, 0.05, 2)
            # Arithmetic mean value of data bits is 0.5000 (0.5 = random).
            self.assertAlmostEqual(mean, 0.5000, 4)
            # Monte Carlo value for Pi is 3.141486168 (error 0.00 percent).
            self.assertAlmostEqual(monte_pi, 3.141486168, 9)
            # Serial correlation coefficient is -0.000773 (totally uncorrelated = 0.0).
            self.assertAlmostEqual(scc, -0.000773, 6)


if __name__ == '__main__':
    unittest.main()
