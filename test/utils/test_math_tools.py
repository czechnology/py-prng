import unittest
from math import gamma, log10
from random import Random

from utils.math_tools import erf_approx as erf, erfc_approx as erfc
from utils.math_tools import incomplete_gamma_lower, incomplete_gamma_upper


class TestMathTools(unittest.TestCase):
    def test_erf_erfc(self):
        """Test if the function correctly returns the error function approximations"""

        # pre-calculated values from http://www.miniwebtool.com/error-function-calculator/
        values_table = (
            (0.00, 0.0000000, 1.0000000), (0.01, 0.0112834, 0.9887166),
            (0.02, 0.0225646, 0.9774354), (0.03, 0.0338412, 0.9661588),
            (0.04, 0.0451111, 0.9548889), (0.05, 0.0563720, 0.9436280),
            (0.06, 0.0676216, 0.9323784), (0.07, 0.0788577, 0.9211423),
            (0.08, 0.0900781, 0.9099219), (0.09, 0.1012806, 0.8987194),
            (0.10, 0.1124629, 0.8875371), (0.11, 0.1236229, 0.8763771),
            (0.12, 0.1347584, 0.8652416), (0.13, 0.1458671, 0.8541329),
            (0.14, 0.1569470, 0.8430530), (0.15, 0.1679960, 0.8320040),
            (0.16, 0.1790118, 0.8209882), (0.17, 0.1899925, 0.8100075),
            (0.18, 0.2009358, 0.7990642), (0.19, 0.2118399, 0.7881601),
            (0.20, 0.2227026, 0.7772974), (0.21, 0.2335219, 0.7664781),
            (0.22, 0.2442959, 0.7557041), (0.23, 0.2550226, 0.7449774),
            (0.24, 0.2657001, 0.7342999), (0.25, 0.2763264, 0.7236736),
            (0.26, 0.2868997, 0.7131003), (0.27, 0.2974182, 0.7025818),
            (0.28, 0.3078801, 0.6921199), (0.29, 0.3182835, 0.6817165),
            (0.30, 0.3286268, 0.6713732), (0.31, 0.3389082, 0.6610919),
            (0.32, 0.3491260, 0.6508740), (0.33, 0.3592787, 0.6407213),
            (0.34, 0.3693645, 0.6306355), (0.35, 0.3793821, 0.6206179),
            (0.36, 0.3893297, 0.6106703), (0.37, 0.3992060, 0.6007940),
            (0.38, 0.4090095, 0.5909905), (0.39, 0.4187387, 0.5812613),
            (0.40, 0.4283924, 0.5716076), (0.41, 0.4379691, 0.5620309),
            (0.42, 0.4474676, 0.5525324), (0.43, 0.4568867, 0.5431133),
            (0.44, 0.4662251, 0.5337749), (0.45, 0.4754817, 0.5245183),
            (0.46, 0.4846554, 0.5153446), (0.47, 0.4937451, 0.5062549),
            (0.48, 0.5027497, 0.4972503), (0.49, 0.5116683, 0.4883317),
            (0.50, 0.5204999, 0.4795001), (0.51, 0.5292436, 0.4707564),
            (0.52, 0.5378986, 0.4621014), (0.53, 0.5464641, 0.4535359),
            (0.54, 0.5549392, 0.4450608), (0.55, 0.5633234, 0.4366766),
            (0.56, 0.5716158, 0.4283842), (0.57, 0.5798158, 0.4201842),
            (0.58, 0.5879229, 0.4120771), (0.59, 0.5959365, 0.4040635),
            (0.60, 0.6038561, 0.3961439), (0.61, 0.6116812, 0.3883188),
            (0.62, 0.6194115, 0.3805885), (0.63, 0.6270464, 0.3729536),
            (0.64, 0.6345858, 0.3654142), (0.65, 0.6420293, 0.3579707),
            (0.66, 0.6493767, 0.3506233), (0.67, 0.6566277, 0.3433723),
            (0.68, 0.6637822, 0.3362178), (0.69, 0.6708401, 0.3291599),
            (0.70, 0.6778012, 0.3221988), (0.71, 0.6846655, 0.3153344),
            (0.72, 0.6914331, 0.3085669), (0.73, 0.6981039, 0.3018961),
            (0.74, 0.7046781, 0.2953219), (0.75, 0.7111556, 0.2888444),
            (0.76, 0.7175368, 0.2824632), (0.77, 0.7238216, 0.2761784),
            (0.78, 0.7300104, 0.2699896), (0.79, 0.7361035, 0.2638965),
            (0.80, 0.7421010, 0.2578990), (0.81, 0.7480033, 0.2519967),
            (0.82, 0.7538108, 0.2461892), (0.83, 0.7595238, 0.2404762),
            (0.84, 0.7651427, 0.2348573), (0.85, 0.7706681, 0.2293319),
            (0.86, 0.7761003, 0.2238997), (0.87, 0.7814398, 0.2185602),
            (0.88, 0.7866873, 0.2133127), (0.89, 0.7918432, 0.2081568),
            (0.90, 0.7969082, 0.2030918), (0.91, 0.8018828, 0.1981172),
            (0.92, 0.8067677, 0.1932323), (0.93, 0.8115636, 0.1884364),
            (0.94, 0.8162710, 0.1837290), (0.95, 0.8208908, 0.1791092),
            (0.96, 0.8254236, 0.1745763), (0.97, 0.8298703, 0.1701297),
            (0.98, 0.8342315, 0.1657685), (0.99, 0.8385081, 0.1614919),
            (1.00, 0.8427008, 0.1572992), (1.01, 0.8468105, 0.1531895),
            (1.02, 0.8508380, 0.1491620), (1.03, 0.8547842, 0.1452158),
            (1.04, 0.8586499, 0.1413501), (1.05, 0.8624361, 0.1375639),
            (1.06, 0.8661436, 0.1338564), (1.07, 0.8697733, 0.1302267),
            (1.08, 0.8733262, 0.1266738), (1.09, 0.8768031, 0.1231969),
            (1.10, 0.8802051, 0.1197949), (1.11, 0.8835330, 0.1164670),
            (1.12, 0.8867879, 0.1132121), (1.13, 0.8899707, 0.1100293),
            (1.14, 0.8930823, 0.1069177), (1.15, 0.8961238, 0.1038762),
            (1.16, 0.8990962, 0.1009038), (1.17, 0.9020004, 0.0979996),
            (1.18, 0.9048374, 0.0951626), (1.19, 0.9076083, 0.0923917),
            (1.20, 0.9103140, 0.0896860), (1.21, 0.9129555, 0.0870445),
            (1.22, 0.9155339, 0.0844661), (1.23, 0.9180501, 0.0819499),
            (1.24, 0.9205052, 0.0794948), (1.25, 0.9229001, 0.0770999),
            (1.26, 0.9252359, 0.0747641), (1.27, 0.9275136, 0.0724864),
            (1.28, 0.9297342, 0.0702658), (1.29, 0.9318986, 0.0681014),
            (1.30, 0.9340079, 0.0659921), (1.31, 0.9360631, 0.0639369),
            (1.32, 0.9380652, 0.0619348), (1.33, 0.9400150, 0.0599850),
            (1.34, 0.9419137, 0.0580863), (1.35, 0.9437622, 0.0562378),
            (1.36, 0.9455614, 0.0544386), (1.37, 0.9473124, 0.0526876),
            (1.38, 0.9490160, 0.0509840), (1.39, 0.9506733, 0.0493267),
            (1.40, 0.9522851, 0.0477149), (1.41, 0.9538524, 0.0461476),
            (1.42, 0.9553762, 0.0446238), (1.43, 0.9568573, 0.0431427),
            (1.44, 0.9582966, 0.0417034), (1.45, 0.9596950, 0.0403050),
            (1.46, 0.9610535, 0.0389465), (1.47, 0.9623729, 0.0376271),
            (1.48, 0.9636541, 0.0363459), (1.49, 0.9648979, 0.0351021),
            (1.50, 0.9661051, 0.0338949), (1.51, 0.9672767, 0.0327233),
            (1.52, 0.9684135, 0.0315865), (1.53, 0.9695162, 0.0304838),
            (1.54, 0.9705857, 0.0294143), (1.55, 0.9716227, 0.0283773),
            (1.56, 0.9726281, 0.0273719), (1.57, 0.9736026, 0.0263974),
            (1.58, 0.9745470, 0.0254530), (1.59, 0.9754620, 0.0245380),
            (1.60, 0.9763484, 0.0236516), (1.61, 0.9772068, 0.0227932),
            (1.62, 0.9780381, 0.0219619), (1.63, 0.9788428, 0.0211572),
            (1.64, 0.9796218, 0.0203782), (1.65, 0.9803756, 0.0196244),
            (1.66, 0.9811049, 0.0188951), (1.67, 0.9818104, 0.0181896),
            (1.68, 0.9824928, 0.0175072), (1.69, 0.9831526, 0.0168474),
            (1.70, 0.9837905, 0.0162095), (1.71, 0.9844070, 0.0155930),
            (1.72, 0.9850028, 0.0149972), (1.73, 0.9855785, 0.0144215),
            (1.74, 0.9861346, 0.0138654), (1.75, 0.9866717, 0.0133283),
            (1.76, 0.9871903, 0.0128097), (1.77, 0.9876909, 0.0123091),
            (1.78, 0.9881742, 0.0118258), (1.79, 0.9886405, 0.0113595),
            (1.80, 0.9890905, 0.0109095), (1.81, 0.9895245, 0.0104755),
            (1.82, 0.9899432, 0.0100568), (1.83, 0.9903468, 0.0096532),
            (1.84, 0.9907359, 0.0092641), (1.85, 0.9911110, 0.0088890),
            (1.86, 0.9914725, 0.0085275), (1.87, 0.9918207, 0.0081793),
            (1.88, 0.9921562, 0.0078438), (1.89, 0.9924793, 0.0075207),
            (1.90, 0.9927904, 0.0072096), (1.91, 0.9930899, 0.0069101),
            (1.92, 0.9933782, 0.0066218), (1.93, 0.9936557, 0.0063444),
            (1.94, 0.9939226, 0.0060774), (1.95, 0.9941793, 0.0058207),
            (1.96, 0.9944263, 0.0055737), (1.97, 0.9946637, 0.0053363),
            (1.98, 0.9948920, 0.0051080), (1.99, 0.9951114, 0.0048886),
            (2.00, 0.9953223, 0.0046777), (2.01, 0.9955248, 0.0044752),
            (2.02, 0.9957195, 0.0042805), (2.03, 0.9959063, 0.0040937),
            (2.04, 0.9960858, 0.0039142), (2.05, 0.9962581, 0.0037419),
            (2.06, 0.9964235, 0.0035765), (2.07, 0.9965822, 0.0034178),
            (2.08, 0.9967344, 0.0032656), (2.09, 0.9968805, 0.0031195),
            (2.10, 0.9970205, 0.0029795), (2.11, 0.9971548, 0.0028452),
            (2.12, 0.9972836, 0.0027164), (2.13, 0.9974070, 0.0025930),
            (2.14, 0.9975253, 0.0024747), (2.15, 0.9976386, 0.0023614),
            (2.16, 0.9977472, 0.0022528), (2.17, 0.9978511, 0.0021489),
            (2.18, 0.9979506, 0.0020494), (2.19, 0.9980459, 0.0019541),
            (2.20, 0.9981372, 0.0018628), (2.21, 0.9982244, 0.0017756),
            (2.22, 0.9983079, 0.0016921), (2.23, 0.9983878, 0.0016122),
            (2.24, 0.9984642, 0.0015358), (2.25, 0.9985373, 0.0014627),
            (2.26, 0.9986071, 0.0013929), (2.27, 0.9986739, 0.0013261),
            (2.28, 0.9987377, 0.0012623), (2.29, 0.9987986, 0.0012014),
            (2.30, 0.9988568, 0.0011432), (2.31, 0.9989124, 0.0010876),
            (2.32, 0.9989655, 0.0010345), (2.33, 0.9990162, 0.0009838),
            (2.34, 0.9990646, 0.0009354), (2.35, 0.9991107, 0.0008893),
            (2.36, 0.9991548, 0.0008452), (2.37, 0.9991968, 0.0008032),
            (2.38, 0.9992369, 0.0007631), (2.39, 0.9992751, 0.0007249),
            (2.40, 0.9993115, 0.0006885), (2.41, 0.9993462, 0.0006538),
            (2.42, 0.9993793, 0.0006207), (2.43, 0.9994108, 0.0005892),
            (2.44, 0.9994408, 0.0005592), (2.45, 0.9994694, 0.0005306),
            (2.46, 0.9994966, 0.0005034), (2.47, 0.9995226, 0.0004774),
            (2.48, 0.9995472, 0.0004528), (2.49, 0.9995707, 0.0004293),
            (2.50, 0.9995930, 0.0004070), (2.51, 0.9996143, 0.0003857),
            (2.52, 0.9996345, 0.0003655), (2.53, 0.9996537, 0.0003463),
            (2.54, 0.9996720, 0.0003280), (2.55, 0.9996893, 0.0003107),
            (2.56, 0.9997058, 0.0002942), (2.57, 0.9997215, 0.0002785),
            (2.58, 0.9997364, 0.0002636), (2.59, 0.9997505, 0.0002495),
            (2.60, 0.9997640, 0.0002360), (2.61, 0.9997767, 0.0002233),
            (2.62, 0.9997888, 0.0002112), (2.63, 0.9998003, 0.0001997),
            (2.64, 0.9998112, 0.0001888), (2.65, 0.9998215, 0.0001785),
            (2.66, 0.9998313, 0.0001687), (2.67, 0.9998406, 0.0001594),
            (2.68, 0.9998494, 0.0001506), (2.69, 0.9998578, 0.0001422),
            (2.70, 0.9998657, 0.0001343), (2.71, 0.9998732, 0.0001268),
            (2.72, 0.9998803, 0.0001197), (2.73, 0.9998870, 0.0001130),
            (2.74, 0.9998934, 0.0001066), (2.75, 0.9998994, 0.0001006),
            (2.76, 0.9999051, 9.49e-05), (2.77, 0.9999105, 8.95e-05), (2.78, 0.9999156, 8.440e-05),
            (2.79, 0.9999204, 7.96e-05), (2.8, 0.999925, 7.5e-05), (2.81, 0.9999293, 7.070e-05),
            (2.82, 0.9999334, 6.66e-05), (2.83, 0.9999372, 6.27e-05), (2.84, 0.9999409, 5.91e-05),
            (2.85, 0.9999443, 5.57e-05), (2.86, 0.9999476, 5.24e-05), (2.87, 0.9999507, 4.93e-05),
            (2.88, 0.9999536, 4.64e-05), (2.89, 0.9999563, 4.37e-05), (2.90, 0.9999589, 4.11e-05),
            (2.91, 0.9999613, 3.87e-05), (2.92, 0.9999636, 3.64e-05), (2.93, 0.9999658, 3.42e-05),
            (2.94, 0.9999679, 3.21e-05), (2.95, 0.9999698, 3.02e-05), (2.96, 0.9999716, 2.84e-05),
            (2.97, 0.9999733, 2.67e-05), (2.98, 0.9999750, 2.50e-05), (2.99, 0.9999765, 2.35e-05),
            (3.00, 0.9999779, 2.21e-05), (3.01, 0.9999793, 2.07e-05), (3.02, 0.9999805, 1.95e-05),
            (3.03, 0.9999817, 1.83e-05), (3.04, 0.9999829, 1.71e-05), (3.05, 0.9999839, 1.61e-05),
            (3.06, 0.9999849, 1.51e-05), (3.07, 0.9999859, 1.41e-05), (3.08, 0.9999867, 1.33e-05),
            (3.09, 0.9999876, 1.24e-05), (3.10, 0.9999884, 1.16e-05), (3.11, 0.9999891, 1.09e-05),
            (3.12, 0.9999898, 1.02e-05), (3.13, 0.9999904, 9.60e-06), (3.14, 0.9999910, 0.90e-05),
            (3.15, 0.9999916, 8.40e-06), (3.16, 0.9999921, 7.90e-06), (3.17, 0.9999926, 0.74e-05),
            (3.18, 0.9999931, 6.90e-06), (3.19, 0.9999936, 6.40e-06), (3.20, 0.9999940, 0.60e-05),
            (3.21, 0.9999944, 5.60e-06), (3.22, 0.9999947, 5.30e-06), (3.23, 0.9999951, 4.90e-06),
            (3.24, 0.9999954, 4.60e-06), (3.25, 0.9999957, 4.30e-06), (3.26, 0.9999960, 4.00e-06),
            (3.27, 0.9999962, 3.80e-06), (3.28, 0.9999965, 3.50e-06), (3.29, 0.9999967, 3.30e-06),
            (3.30, 0.9999969, 3.10e-06), (3.31, 0.9999971, 2.90e-06), (3.32, 0.9999973, 2.70e-06),
            (3.33, 0.9999975, 2.50e-06), (3.34, 0.9999977, 2.30e-06), (3.35, 0.9999978, 2.20e-06),
            (3.36, 0.9999980, 2.00e-06), (3.37, 0.9999981, 1.90e-06), (3.38, 0.9999982, 1.80e-06),
            (3.39, 0.9999984, 1.60e-06), (3.40, 0.9999985, 1.50e-06), (3.41, 0.9999986, 1.40e-06),
            (3.42, 0.9999987, 1.30e-06), (3.43, 0.9999988, 1.20e-06), (3.44, 0.9999989, 1.10e-06),
            (3.45, 0.9999989, 1.10e-06), (3.46, 0.9999990, 1.00e-06), (3.47, 0.9999991, 0.90e-06),
            (3.48, 0.9999991, 0.90e-06), (3.49, 0.9999992, 0.90e-06), (3.50, 0.9999993, 0.70e-06))

        for x, erf_x, erfc_x in values_table:
            self.assertAlmostEqual(erf(x), erf_x, places=6)
            self.assertAlmostEqual(erfc(x), erfc_x, places=6)

    def test_incomplete_gamma_sum(self):
        """Test if the sum of lower and upper incomplete gamma functions correctly produce the
        gamma function"""

        rand = Random(372924)
        for _ in range(10):
            a, x = rand.random() * 10, rand.random() * 10
            l = incomplete_gamma_lower(a, x)
            r = incomplete_gamma_upper(a, x)
            g = gamma(a)
            self.assertAlmostEqual(l + r, g, 10)

    def test_incomplete_gamma_lower(self):
        """Test the lower incomplete gamma function approximation against pre-computed values."""

        # Pre-computed values from Octave, generated with
        # for a=1:10 for x=1:10 printf("(%d,%d,%.7f),", a, x, gammainc(x,a)*gamma(a)) endfor endfor
        values_table = (
            (1, 1, 0.6321206), (1, 2, 0.8646647), (1, 3, 0.9502129), (1, 4, 0.9816844),
            (1, 5, 0.9932621), (1, 6, 0.9975212), (1, 7, 0.9990881), (1, 8, 0.9996645),
            (1, 9, 0.9998766), (1, 10, 0.9999546), (2, 1, 0.2642411), (2, 2, 0.5939942),
            (2, 3, 0.8008517), (2, 4, 0.9084218), (2, 5, 0.9595723), (2, 6, 0.9826487),
            (2, 7, 0.9927049), (2, 8, 0.9969808), (2, 9, 0.9987659), (2, 10, 0.9995006),
            (3, 1, 0.1606028), (3, 2, 0.6466472), (3, 3, 1.1536198), (3, 4, 1.5237934),
            (3, 5, 1.7506960), (3, 6, 1.8760624), (3, 7, 1.9407277), (3, 8, 1.9724921),
            (3, 9, 1.9875356), (3, 10, 1.9944612), (4, 1, 0.1139289), (4, 2, 0.8572592),
            (4, 3, 2.1166087), (4, 4, 3.3991793), (4, 5, 4.4098445), (4, 6, 5.0927767),
            (4, 7, 5.5094075), (4, 8, 5.7457193), (4, 9, 5.8726411), (4, 10, 5.9379837),
            (5, 1, 0.0878363), (5, 2, 1.2636724), (5, 3, 4.4336821), (5, 4, 8.9079136),
            (5, 5, 13.4281612), (5, 6, 17.1586440), (5, 7, 19.8482014), (5, 8, 21.6088224),
            (5, 9, 22.6808726), (5, 10, 23.2979355), (6, 1, 0.0713022), (6, 2, 1.9876330),
            (6, 3, 10.0701530), (6, 4, 25.7843536), (6, 5, 46.0847214), (6, 6, 66.5184430),
            (6, 7, 83.9150069), (6, 8, 97.0516726), (6, 9, 106.1171375), (6, 10, 111.9496845),
            (7, 1, 0.0599336), (7, 2, 3.2643400), (7, 3, 24.1261454), (7, 4, 79.6852644),
            (7, 5, 171.2279067), (7, 6, 283.4619967), (7, 7, 396.2080398), (7, 8, 494.3705202),
            (7, 9, 571.1177953), (7, 10, 626.2981770), (8, 1, 0.0516560), (8, 2, 5.5274636),
            (8, 3, 59.9986994), (8, 4, 257.7134236), (8, 5, 672.1932373), (8, 6, 1290.3420073),
            (8, 7, 2022.4822690), (8, 8, 2757.0775202), (8, 9, 3407.5592999), (8, 10, 3930.0879411),
            (9, 1, 0.0453682), (9, 2, 9.5738763), (9, 3, 153.3366399), (9, 4, 861.3736786),
            (9, 5, 2745.5353520), (9, 6, 6159.3842425), (9, 7, 10923.0400848),
            (9, 8, 16428.4911932), (9, 9, 21948.0869937), (9, 10, 26900.7105528),
            (10, 1, 0.0404341), (10, 2, 16.8732215), (10, 3, 400.0708927), (10, 4, 2951.0282662),
            (10, 5, 11549.7654353), (10, 6, 30454.3472871), (10, 7, 61509.6342948),
            (10, 8, 102831.3889931), (10, 9, 149721.2962968), (10, 10, 196706.4652125),
        )

        for a, x, inc_gam_value in values_table:
            self.assertAlmostEqual(incomplete_gamma_lower(a, x), inc_gam_value,
                                   places=min(7, int(6 - log10(inc_gam_value))))

    def test_incomplete_gamma_upper(self):
        """Test the upper incomplete gamma function approximation against pre-computed values."""

        # Pre-computed values from Octave, generated with:
        #   for a=1:10 for x=1:10
        #       printf("(%d,%d,%.7f),", a, x, gammainc(x,a,'upper')*gamma(a))
        #   endfor endfor
        values_table = (
            (1, 1, 0.3678794), (1, 2, 0.1353353), (1, 3, 0.0497871), (1, 4, 0.0183156),
            (1, 5, 0.0067379), (1, 6, 0.0024788), (1, 7, 0.0009119), (1, 8, 0.0003355),
            (1, 9, 0.0001234), (1, 10, 0.0000454), (2, 1, 0.7357589), (2, 2, 0.4060058),
            (2, 3, 0.1991483), (2, 4, 0.0915782), (2, 5, 0.0404277), (2, 6, 0.0173513),
            (2, 7, 0.0072951), (2, 8, 0.0030192), (2, 9, 0.0012341), (2, 10, 0.0004994),
            (3, 1, 1.8393972), (3, 2, 1.3533528), (3, 3, 0.8463802), (3, 4, 0.4762066),
            (3, 5, 0.2493040), (3, 6, 0.1239376), (3, 7, 0.0592723), (3, 8, 0.0275079),
            (3, 9, 0.0124644), (3, 10, 0.0055388), (4, 1, 5.8860711), (4, 2, 5.1427408),
            (4, 3, 3.8833913), (4, 4, 2.6008207), (4, 5, 1.5901555), (4, 6, 0.9072233),
            (4, 7, 0.4905925), (4, 8, 0.2542807), (4, 9, 0.1273589), (4, 10, 0.0620163),
            (5, 1, 23.9121637), (5, 2, 22.7363276), (5, 3, 19.5663179), (5, 4, 15.0920864),
            (5, 5, 10.5718388), (5, 6, 6.8413560), (5, 7, 4.1517986), (5, 8, 2.3911776),
            (5, 9, 1.3191274), (5, 10, 0.7020645), (6, 1, 119.9286978), (6, 2, 118.0123670),
            (6, 3, 109.9298470), (6, 4, 94.2156464), (6, 5, 73.9152786), (6, 6, 53.4815570),
            (6, 7, 36.0849931), (6, 8, 22.9483274), (6, 9, 13.8828625), (6, 10, 8.0503155),
            (7, 1, 719.9400664), (7, 2, 716.7356600), (7, 3, 695.8738546), (7, 4, 640.3147356),
            (7, 5, 548.7720933), (7, 6, 436.5380033), (7, 7, 323.7919602), (7, 8, 225.6294798),
            (7, 9, 148.8822047), (7, 10, 93.7018230), (8, 1, 5039.9483440), (8, 2, 5034.4725364),
            (8, 3, 4980.0013006), (8, 4, 4782.2865764), (8, 5, 4367.8067627), (8, 6, 3749.6579927),
            (8, 7, 3017.5177310), (8, 8, 2282.9224798), (8, 9, 1632.4407001), (8, 10, 1109.9120589),
            (9, 1, 40319.9546318), (9, 2, 40310.4261237), (9, 3, 40166.6633601),
            (9, 4, 39458.6263214), (9, 5, 37574.4646480), (9, 6, 34160.6157575),
            (9, 7, 29396.9599152), (9, 8, 23891.5088068), (9, 9, 18371.9130063),
            (9, 10, 13419.2894472), (10, 1, 362879.9595659), (10, 2, 362863.1267785),
            (10, 3, 362479.9291073), (10, 4, 359928.9717338), (10, 5, 351330.2345647),
            (10, 6, 332425.6527129), (10, 7, 301370.3657052), (10, 8, 260048.6110069),
            (10, 9, 213158.7037032), (10, 10, 166173.5347875)
        )

        for a, x, inc_gam_value in values_table:
            self.assertAlmostEqual(incomplete_gamma_upper(a, x), inc_gam_value,
                                   places=min(7, int(6 - log10(inc_gam_value))))


if __name__ == '__main__':
    unittest.main()
